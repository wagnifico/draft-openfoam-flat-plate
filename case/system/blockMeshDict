/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

L           1; // plate length
alpha       15.0; // plate angle, deg
alpha_rad   #eval{ degToRad($alpha) }; // plate angle, rad

ref           40; // refinement expansiong factor for close to plate
inv_ref       #eval{ 1.0/$ref} ;

L_upstream    7; // upstream length
L_downstream  10; // downstream length
Ly            10; // domain height
Lz            1; // domain thickness

// Divisions in x/y/z directions. Can be unequal.
nx_upstream    50;
nx_center      100;
nx_downstream  75;
ny             50;
nz             1;

x_upstream      #eval{ $L_upstream }; // x of top of plate
y_upstream      #eval{ $Ly/2 + $L*sin($alpha_rad)/2 }; // y of upstream of plate

x_downstream    #eval{ $x_upstream + $L*cos($alpha_rad) }; // x of bottom of plate
y_downstream    #eval{ $Ly/2 - $L*sin($alpha_rad)/2 }; // y of bottom of plate

Lx              #eval{ $x_downstream + $L_downstream }; // domain total length

vertices
(
    // bottom-upstream block
    (0    0      0)
    ($L_upstream 0      0)
    ($L_upstream $y_upstream 0)
    (0    $y_upstream 0)

    (0    0      $Lz)
    ($L_upstream 0      $Lz)
    ($L_upstream $y_upstream $Lz)
    (0    $y_upstream $Lz)

    // bottom-center block
    ($x_downstream 0         0)
    ($x_downstream $y_downstream 0)

    ($x_downstream 0         $Lz)
    ($x_downstream $y_downstream $Lz)

    // bottom-donwstream block
    ($Lx 0         0)
    ($Lx $y_downstream 0)

    ($Lx 0         $Lz)
    ($Lx $y_downstream $Lz)
    
    // upper-upstream block
    ($x_upstream $Ly    0)
    (0      $Ly    0)

    ($x_upstream $Ly    $Lz)
    (0      $Ly    $Lz)

    // upper-center block
    ($x_downstream $Ly    0)

    ($x_downstream $Ly   $Lz)
    
    // upper-donwstream block
    ($Lx       $Ly    0)

    ($Lx       $Ly   $Lz)

);

blocks
(
    // bottom-upstream block
    hex (0 1 2 3 4 5 6 7) ($nx_upstream $ny $nz) simpleGrading ($inv_ref $inv_ref 1)
    // bottom-center block
    hex (1 8 9 2 5 10 11 6) ($nx_center $ny $nz) simpleGrading (1 $inv_ref 1)
    // bottom-donwstream- block
    hex (8 12 13 9 10 14 15 11) ($nx_downstream $ny $nz) simpleGrading ($ref $inv_ref 1)
    // upper upstream block
    hex (3 2 16 17 7 6 18 19) ($nx_upstream $ny $nz) simpleGrading ($inv_ref $ref 1)
    // upper-center block
    hex (2 9 20 16 6 11 21 18) ($nx_center $ny $nz) simpleGrading (1 $ref 1)
    // upper-donwstream block
    hex (9 13 22 20 11 15 23 21) ($nx_downstream $ny $nz) simpleGrading ($ref $ref 1)
);

edges
(
);

faces
(
);

boundary
(
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 2 3)
            (4 5 6 7)
            (1 8 9 2)
            (5 10 11 6)
            (8 12 13 9)
            (10 14 15 11)
            (3 2 16 17)
            (7 6 18 19)
            (2 9 20 16)
            (6 11 21 18)
            (9 13 22 20)
            (11 15 23 21)
        );
    }

    inlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
            (3 7 19 17)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (13 15 14 12)
            (22 23 15 13)
        );
    }

    topAndBottom
    {
        type patch;
        faces
        (
            (1 5 4 0)
            (5 8 10 1)
            (8 12 14 10)
            (17 19 18 16)
            (16 18 20 21)
            (20 21 22 23)
        );
    }
);


// ************************************************************************* //
